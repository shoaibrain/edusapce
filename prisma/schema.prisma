generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phone          String?
  emailVerified  DateTime?
  phoneVerified  DateTime?
  hashedPassword String?
  role           Role      @default(USER)
  image          String?
  addres         String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Student {
  id               String      @id @default(cuid())
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  gender           String
  nationality      String?
  ssn              String?
  email            String?     @unique
  phone            String?
  address          String
  enrollmentStatus String?
  role             Role        @default(STUDENT)
  guardians        Guardian[]  @relation("GuardianStudent")
  currentGrade     GradeLevel? @relation(fields: [currentGradeId], references: [id])
  currentGradeId   String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @default(now()) @map("updated_at")
}

model GradeLevel {
  id          String    @id @default(cuid())
  name        String // e.g., "Grade One", "Grade Two"
  levelOrder  Int       @unique // An integer representing the order of the grade level
  description String?
  category    String? // e.g., "Elementary", "Middle School", "High School"
  students    Student[] // One-to-Many relationship with students
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  @@map("grade_levels")
}

model Class {
  id           String        @id @default(cuid())
  name         String // e.g., "Math", "Science"
  description  String?
  type         ClassType // Use the ClassType enum to categorize classes
  classPeriods ClassPeriod[] // One-to-Many relationship with ClassPeriod
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")

  @@map("classes")
}

model ClassPeriod {
  id        String   @id @default(cuid())
  name      String // e.g., "Morning Session", "Afternoon Session"
  classId   String
  teacherId String?
  class     Class    @relation(fields: [classId], references: [id])
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("class_periods")
}

enum ClassType {
  MATH
  SCIENCE
  HISTORY
  ENGLISH
  ART
  MUSIC
  PHYSICAL_EDUCATION
  FOREIGN_LANGUAGE
  OTHER
}

model Term {
  id          String   @id @default(cuid())
  name        String // e.g., "Fall Term", "Spring Term"
  startDate   DateTime
  endDate     DateTime
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  @@map("terms")
}

model Teacher {
  id          String      @id @default(cuid())
  firstName   String
  middleName  String?
  lastName    String
  phone       String
  email       String      @unique
  address     String
  teacherRole TeacherRole
  birthDate   DateTime
  gender      String
  hiredDate   DateTime?   @map("hired_date")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
}

enum TeacherRole {
  TEACHER
  STAFF
  ACCOUNTANT
  PRINCIPAL
}

model Guardian {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  phone        String
  address      String
  email        String?   @unique
  profession   String?
  annualIncome String?
  guardianType String?
  role         Role      @default(USER)
  students     Student[] @relation("GuardianStudent")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  TEACHER
  STAFF
  STUDENT
  USER
}
