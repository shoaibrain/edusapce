generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phone          String?
  emailVerified  DateTime?
  phoneVerified  DateTime?
  hashedPassword String?
  role           Role      @default(USER)
  image          String?
  addres         String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Student {
  id               String      @id @default(cuid())
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  gender           String
  currentGrade     String?
  nationality      String?
  ssn              String?
  email            String?
  phone            String?
  address          String
  enrollmentStatus String?
  role             Role        @default(STUDENT)
  guardians        Guardian[]  @relation("GuardianStudent")
  class            Class?      @relation(fields: [classId], references: [id])
  gradeLevel       GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId     String?
  classId          String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @default(now()) @map("updated_at")
}

model Class {
  id           String        @id @default(cuid())
  name         String
  gradeLevelId String
  gradeLevel   GradeLevel    @relation(fields: [gradeLevelId], references: [id])
  students     Student[] // One-to-many relationship with Student
  classPeriods ClassPeriod[] // One-to-many relationship with ClassPeriod
  teachers     Employee[] // Many-to-many relationship with Employee (Teachers)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
}

model Guardian {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  phone        String
  address      String
  email        String?
  profession   String?
  annualIncome String?
  guardianType String?
  role         Role      @default(USER)
  students     Student[] @relation("GuardianStudent")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
}

model ClassPeriod {
  id        String   @id @default(cuid())
  name      String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model GradeLevel {
  id        String    @id @default(cuid())
  name      String
  students  Student[] // One-to-many relationship with Student
  classes   Class[] // One-to-many relationship with Class
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
}

model Employee {
  id         String    @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String
  phone      String
  email      String?
  address    String
  role       Role      @default(STAFF)
  birthDate  String?
  gender     String
  ssn        String?
  department String?
  hiredDate  DateTime? @map("hired_date")
  classes    Class[] // Many-to-many relationship with Teachers
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  TEACHER
  STAFF
  STUDENT
  USER
}
