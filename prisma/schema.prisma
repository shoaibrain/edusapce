generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              Tenant   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Tenant   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Tenant {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phone          String?   @unique
  emailVerified  DateTime?
  phoneVerified  DateTime?
  hashedPassword String?
  role           Role      @default(ADMIN)
  image          String?
  address        String?   @map("addres")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  accounts       Account[]
  schools        School[]
  sessions       Session[]

  @@map("tenants")
}

model School {
  id              String           @id @default(cuid())
  tenantId        String
  name            String
  address         String
  phone           String
  email           String?          @unique
  website         String?          @unique
  schoolType      String?
  description     String?
  logo            String?
  font            String           @default("font-cal")
  image           String?
  imageBlurhash   String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @map("updated_at")
  departments     Department[]
  yearGradeLevels YearGradeLevel[]
  tenant          Tenant           @relation(fields: [tenantId], references: [id])

  @@map("schools")
}

model YearGradeLevel {
  id            String        @id @default(cuid())
  schoolId      String
  levelName     String        @map("levelName")
  description   String?
  levelCategory String
  levelOrder    Int
  capacity      Int?
  classRoom     String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  classPeriods  ClassPeriod[]
  School        School        @relation(fields: [schoolId], references: [id])
  students      Student[]

  @@map("grade_levels")
}

model Student {
  id               String          @id @default(cuid())
  schoolId         String
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  gender           String
  nationality      String?
  ssn              String?         @unique
  email            String?         @unique
  phone            String?
  address          String
  enrollmentStatus String?         @default("ADMITTED")
  role             Role            @default(STUDENT)
  yearGradeLevelId String?
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  yearGradeLevel   YearGradeLevel? @relation(fields: [yearGradeLevelId], references: [id])
  guardians        Guardian[]      @relation("GuardianToStudent")

  @@map("students")
}

model ClassPeriod {
  id           String          @id @default(cuid())
  gradeLevelId String?
  subjectId    String?
  name         String
  classType    String?
  description  String?
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @default(now()) @map("updated_at")
  instructorId String?
  departmentId String?
  department   Department?     @relation(fields: [departmentId], references: [id])
  gradeLevel   YearGradeLevel? @relation(fields: [gradeLevelId], references: [id])
  instructor   Employee?       @relation(fields: [instructorId], references: [id])
  subject      Subject?        @relation(fields: [subjectId], references: [id])

  @@map("class_periods")
}

model Department {
  id           String        @id @default(cuid())
  schoolId     String
  name         String
  classPeriods ClassPeriod[]
  school       School        @relation(fields: [schoolId], references: [id])
  teachers     Employee[]

  @@unique([schoolId, name])
  @@map("departments")
}

model SchoolYear {
  schoolId  String      @id @unique @default(cuid()) @map("school_id")
  startDate DateTime
  endDate   DateTime
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  terms     SchoolTerm?

  @@map("school_years")
}

model SchoolTerm {
  school_id  String     @id
  name       String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @map("updated_at")
  schoolYear SchoolYear @relation(fields: [school_id], references: [schoolId])

  @@map("school_terms")
}

model Employee {
  id           String        @id @default(cuid())
  tenantId     String
  schoolId     String
  firstName    String
  middleName   String?
  lastName     String
  phone        String
  email        String?       @unique
  address      String
  role         Role          @default(STAFF)
  birthDate    DateTime?
  gender       String?
  ssn          String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  departmentId String?
  classPeriods ClassPeriod[]
  department   Department?   @relation(fields: [departmentId], references: [id])

  @@map("employees")
}

model Subject {
  id           String        @id @default(cuid())
  schoolId     String
  subjectName  String
  textbookName String?
  textbookUrl  String?
  description  String?
  ClassPeriod  ClassPeriod[]

  @@map("subjects")
}

model Guardian {
  id           String    @id @default(cuid())
  schoolId     String    @map("school_id")
  firstName    String
  middleName   String?
  lastName     String
  phone        String
  address      String
  email        String?
  profession   String?
  annualIncome String?
  guardianType String?
  role         Role?
  canPickup    Boolean?  @default(false) @map("can_pickup")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  students     Student[] @relation("GuardianToStudent")

  @@map("guardians")
}

enum Role {
  SUPPORT
  ADMIN
  PRINCIPAL
  TEACHER
  STAFF
  STUDENT
  USER
}
