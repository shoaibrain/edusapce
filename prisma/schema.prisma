generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              Tenant   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Tenant   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  SUPPORT
  ADMIN
  PRINCIPAL
  TEACHER
  STAFF
  STUDENT
  USER
}

// Tenant is a root node for the system usage
model Tenant {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phone          String?
  emailVerified  DateTime?
  phoneVerified  DateTime?
  hashedPassword String?
  role           Role      @default(ADMIN)
  image          String?
  addres         String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  accounts       Account[]
  sessions       Session[]

  schoolId String? @unique @map("school_id")

  school School[]

  @@map("tenants")
}

// tenant logs in, get schools for that tenant
// on tenant dashboard, tenant have access their school & school's services
// as well as tenant's services

model School {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  email     String?
  website   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  tenants   Tenant   @relation(fields: [tenantId], references: [id])

  schoolYear SchoolYear @relation(fields: [id], references: [schoolId]) // current school year
  tenantId   String     @unique

  @@map("schools")
}

// uniquely identifiable by school
// this table is supposed to be entry point for school-related data, mainly identified by school_id
model SchoolYear {
  schoolId  String       @id @unique @default(cuid()) @map("school_id")
  //academic year start and end dates
  startDate DateTime
  endDate   DateTime
  // school_year can have multiple terms (Fall 2020, Spring 2021, Fall 2021 etc.)
  terms     SchoolTerm[] // list of current school terms

  yearLevels YearGradeLevel[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  School    School[]

  @@map("school_years")
}

// school terms (e.g., Fall 2020, Spring 2021, First_term, N_term etc.)
model SchoolTerm {
  school_id String   @id
  name      String
  // term cycle start and end dates
  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  schoolYear SchoolYear @relation(fields: [school_id], references: [schoolId])

  @@map("school_terms")
}

// Kindergarten, First grade, second grade, etc.
model YearGradeLevel {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  levelCategory String // Elementary, Middle, High
  levelOrder    Int
  capacity      Int?
  classRoom     String?
  students      Student[]
  classePeriods ClassPeriod[] // Classes belonging to this grade level
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  SchoolYear    SchoolYear?   @relation(fields: [schoolYearId], references: [schoolId])
  schoolYearId  String?

  @@index([name])
  @@index([levelCategory])
  @@map("grade_levels")
}

// First Period, Second Period, etc.
model ClassPeriod {
  id           String          @id @default(cuid())
  gradeLevelId String? // foreign key to YearGradeLevel
  gradeLevel   YearGradeLevel? @relation(fields: [gradeLevelId], references: [id])
  subjectId    String? // foreign key to Subject assigned to this class
  subject      Subject?        @relation(fields: [subjectId], references: [id])

  name        String
  classType   String? // e.g., Regular, Lab, etc.
  capacity    Int?
  department  String
  description String?

  // class period schedule
  startTime DateTime
  endTime   DateTime
  // class can be taught by multiple teachers
  teachers  Employee[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")

  @@map("class_periods")
}

// tenant cannot create Student without having existing school
// tenant ceates student in context of school
// students exists in School
// Student have access to School's services (these services are provided by school using eduSpace)
model Student {
  id               String          @id @default(cuid())
  schoolId         String          @map("school_id")
  // basic attributes
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  gender           String
  // identity related attributes
  nationality      String?
  ssn              String?         @unique
  email            String?         @unique
  phone            String? // current phone number
  address          String
  // school related attributes
  enrollmentStatus String?
  role             Role            @default(STUDENT)
  gradeLevel       String // foreign key to Class Grade Level
  classGradeLevel  YearGradeLevel? @relation(fields: [gradeLevel], references: [id])
  guardians        Guardian[] // can have multiple guardians
  medicalRecordId  String?         @unique
  medicalRecord    MedicalRecord?  @relation(fields: [medicalRecordId], references: [id])
  attendance       Attendance[] // attendence records for this student
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  TestResults      TestResult[] // list of test results for this student

  @@index([schoolId, ssn, firstName, lastName])
  @@map("students")
}

// Employees are users of the system
// Employees are provisioned by the tenant in context of school
model Employee {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  schoolId String @map("school_id")

  firstName  String
  middleName String?
  lastName   String
  phone      String
  email      String?   @unique
  address    String
  role       Role      @default(STAFF)
  birthDate  DateTime?
  gender     String?
  ssn        String?
  department String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  employeeSalaries EmployeeSalary[]

  ClassPeriods ClassPeriod[] // employee can teach multiple classes
  gradedTests  TestResult[] // teacher can grade multiple tests
  attendance   Attendance[]

  medicalRecordId String?        @unique
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])

  @@map("employees")
}

model EmployeeSalary {
  id         String    @id @default(cuid())
  salaryType String
  amount     Float
  currency   String
  // salary start and end dates
  startDate  DateTime
  endDate    DateTime?
  notes      String?
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")

  @@index([employeeId])
  @@map("employee_salaries")
}

// Exam, Quiz, Homework, etc.
model Test {
  id            String       @id @default(cuid())
  name          String
  description   String?
  testType      String // Homework, Quiz, Exam, etc.
  question      String? // URL to the test questions
  classPeriodId String? // foreign key to ClassPeriod this test belongs to
  Subject       Subject?     @relation(fields: [subjectId], references: [id])
  subjectId     String? // foreign key to Subject this test belongs to
  testDate      DateTime
  testResults   TestResult[]

  @@index([name, testType, classPeriodId, subjectId])
  @@map("tests")
}

model TestResult {
  id         String    @id @default(cuid())
  testId     String
  studentId  String
  employeeId String? // employee->teacher grades the test
  scores     Int
  takenAt    DateTime
  gradedAt   DateTime
  test       Test      @relation(fields: [testId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
  grader     Employee? @relation(fields: [employeeId], references: [id])

  @@index([testId, studentId, employeeId])
  @@map("test_results")
}

// Subjects are textbooks/papers/articels ,etc used in classes
// eduSpace provides access to online textbooks(presumably)
// Subjects are digital resources, and can be printed out as well

model Subject {
  id       String @id @default(cuid())
  schoolId String @map("school_id")

  subjectName  String
  textbookName String?
  textbookUrl  String?
  description  String?
  department   String?

  tests       Test[] // all tests for this subject
  ClassPeriod ClassPeriod[]

  @@index([subjectName, department])
  @@map("subjects")
}

// TODO: design relations with other
model MedicalRecord {
  id         String    @id @default(cuid())
  bloodType  String?
  doctorName String?
  notes      String?
  Student    Student?
  Employee   Employee?

  @@map("medical_records")
}

model Guardian {
  id       String @id @default(cuid())
  schoolId String @map("school_id")

  firstName  String
  middleName String?
  lastName   String
  phone      String
  address    String
  email      String?

  profession   String?
  annualIncome String?

  guardianType String?
  role         Role?
  students     Student[]

  canPickup Boolean? @default(false) @map("can_pickup")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([phone, email, guardianType])
  @@map("guardians")
}

model Attendance {
  id       String @id @default(cuid())
  schoolId String @map("school_id")

  date   DateTime // date of attendance
  status String

  student    Student?  @relation(fields: [studentId], references: [id])
  studentId  String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([date, studentId, employeeId])
  @@map("attendances")
}
