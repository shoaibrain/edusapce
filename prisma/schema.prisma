generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phone          String?
  emailVerified  DateTime?
  phoneVerified  DateTime?
  hashedPassword String?
  role           Role      @default(USER)
  image          String?
  addres         String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  SUPPORT
  ADMIN
  PRINCIPAL
  TEACHER
  STAFF
  STUDENT
  USER
}

model SchoolYear {
  id                String       @id @default(cuid())
  name              String
  startDate         DateTime
  endDate           DateTime
  terms             SchoolTerm[]
  allocatedBudget   Float?
  expenses          Float        @default(0)
  registrationOpen  Boolean?
  registrationClose DateTime?
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @default(now()) @map("updated_at")

  @@map("school_years")
}

// school terms (e.g., Fall 2020, Spring 2021, etc.)
model SchoolTerm {
  id                String       @id @default(cuid())
  termName          String
  startDate         DateTime
  endDate           DateTime
  schoolYearId      String // Foreign key to SchoolYear
  registrationOpen  Boolean?
  registrationClose DateTime?
  enrollmentCount   Int          @default(0)
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @default(now()) @map("updated_at")
  schoolYear        SchoolYear   @relation(fields: [schoolYearId], references: [id])
  gradeLevels       GradeLevel[]

  @@map("school_terms")
}

// First grade, second grade, etc.
model GradeLevel {
  id            String        @id @default(cuid())
  levelName     String        @unique
  description   String?
  levelCategory String // Elementary, Middle, High
  levelOrder    Int
  capacity      Int?
  students      Student[]
  classePeriods ClassPeriod[] // Classes belonging to this grade level
  Term          SchoolTerm?   @relation(fields: [termId], references: [id])
  termId        String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")

  @@map("grade_levels")
}

// First Period, Second Period, etc.
model ClassPeriod {
  id           String     @id @default(cuid())
  name         String
  capacity     Int?
  subject      Subject    @relation(fields: [subjectId], references: [id])
  department   String
  description  String?
  startTime    DateTime
  endTime      DateTime
  gradeLevelId String? // Foreign key to GradeLevel
  teachers     Employee[] // A class can be taught by multiple teachers
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")

  // Explicit foreign key reference
  gradeLevel GradeLevel? @relation(fields: [gradeLevelId], references: [id])
  subjectId  String

  @@map("class_periods")
}

model Guardian {
  id           String    @id @default(cuid())
  firstName    String
  middleName   String?
  lastName     String
  phone        String
  address      String
  email        String?
  profession   String?
  annualIncome String?
  guardianType String?
  role         Role      @default(USER)
  students     Student[]
  isPrimary    Boolean   @default(false) @map("is_primary")
  canPickup    Boolean   @default(false) @map("can_pickup")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")

  @@map("guardians")
}

model Student {
  id               String         @id @default(cuid())
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  gender           String
  nationality      String?
  ssn              String?
  email            String?
  phone            String?
  address          String
  enrollmentStatus String?
  role             Role           @default(STUDENT)
  gradeLevelId     String?
  gradeLevel       GradeLevel?    @relation(fields: [gradeLevelId], references: [id])
  guardians        Guardian[]
  medicalRecord    MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId  String?        @unique
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @map("updated_at")

  @@map("students")
}

model Employee {
  id              String         @id @default(cuid())
  firstName       String
  middleName      String?
  lastName        String
  phone           String
  email           String?
  address         String
  classes         ClassPeriod[] // Employee|Teacher can teach multiple classes
  role            Role           @default(STAFF)
  birthDate       DateTime
  gender          String
  ssn             String?
  department      String?
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId String?        @unique
  hiredDate       DateTime?      @map("hired_date")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")

  @@map("employees")
}

model Test {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String // Quiz, Assignment, Terminal  Exam, Final Exam, etc.
  question    String? // url to the question file
  classId     String? // Foreign key to ClassPeriod
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  Subject     Subject? @relation(fields: [subjectId], references: [id])
  subjectId   String?

  @@map("tests")
}

// Math, English, Chemistry, etc.
model Subject {
  id           String        @id @default(cuid())
  subjectName  String
  textbookName String?
  textbookUrl  String?
  description  String?
  department   String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  ClassPeriod  ClassPeriod[]
  tests        Test[] // A subject can have multiple tests

  @@map("subjects")
}

model MedicalRecord {
  id         String    @id @default(cuid())
  bloodType  String?
  doctorName String?
  notes      String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  Employee   Employee?
  Student    Student?

  @@map("medical_records")
}
