generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phone          String?
  emailVerified  DateTime?
  phoneVerified  DateTime?
  hashedPassword String?
  role           Role      @default(USER)
  image          String?
  addres         String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  accounts       Account[]
  sessions       Session[]
  schoolId       String?   @map("school_id")
  school         School?   @relation(fields: [schoolId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  SUPPORT
  ADMIN
  PRINCIPAL
  TEACHER
  STAFF
  STUDENT
  USER
}

// User/Admin register a school/s
model School {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  email     String?
  website   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  users     User[]

  @@index([name])
  @@map("schools")
}

model SchoolYear {
  id                String           @id @default(cuid())
  name              String
  schoolId          String           @unique @map("school_id")
  //academic year start and end dates
  startDate         DateTime
  endDate           DateTime
  // school_year can have multiple terms (Fall 2020, Spring 2021, Fall 2021 etc.)
  terms             SchoolTerm[]
  // class grade levels each academic year
  yearLevels        YearGradeLevel[]
  allocatedBudget   Float?
  expenses          Float            @default(0)
  // this should allow student enrollment for the school year
  registrationClose DateTime?
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @default(now()) @map("updated_at")

  @@index([name, startDate, endDate])
  @@map("school_years")
}

// school terms (e.g., Fall 2020, Spring 2021, First_term, N_term etc.)
model SchoolTerm {
  id                String     @id @default(cuid())
  name              String
  // term cycle start and end dates
  startDate         DateTime
  endDate           DateTime
  schoolYearId      String // Foreign key to SchoolYear
  // this should allow student enrollment for the school term
  registrationClose DateTime?
  enrollmentCount   Int        @default(0)
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @default(now()) @map("updated_at")
  schoolYear        SchoolYear @relation(fields: [schoolYearId], references: [id])

  @@index([name, startDate, endDate, schoolYearId])
  @@map("school_terms")
}

// Kindergarten, First grade, second grade, etc.
model YearGradeLevel {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  levelCategory String // Elementary, Middle, High
  levelOrder    Int
  capacity      Int?
  classRoom     String?
  students      Student[]
  classePeriods ClassPeriod[] // Classes belonging to this grade level
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  SchoolYear    SchoolYear?   @relation(fields: [schoolYearId], references: [id])
  schoolYearId  String?

  @@index([name])
  @@index([levelCategory])
  @@map("grade_levels")
}

// First Period, Second Period, etc.
model ClassPeriod {
  id           String          @id @default(cuid())
  name         String
  classType    String? // e.g., Regular, Lab, etc.
  capacity     Int?
  department   String
  description  String?
  // class period schedule
  startTime    DateTime
  endTime      DateTime
  // class can be taught by multiple teachers
  teachers     Employee[]
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @default(now()) @map("updated_at")
  gradeLevelId String? // foreign key to YearGradeLevel
  gradeLevel   YearGradeLevel? @relation(fields: [gradeLevelId], references: [id])
  subjectId    String? // foreign key to Subject assigned to this class
  subject      Subject?        @relation(fields: [subjectId], references: [id])

  @@index([department, startTime, endTime, gradeLevelId])
  @@map("class_periods")
}

model Student {
  id               String          @id @default(cuid())
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  gender           String
  nationality      String?
  ssn              String?
  email            String?
  phone            String?
  address          String
  enrollmentStatus String?
  role             Role            @default(STUDENT)
  gradeLevel       String // foreign key to Class Grade Level
  classGradeLevel  YearGradeLevel? @relation(fields: [gradeLevel], references: [id])
  guardians        Guardian[] // can have multiple guardians
  medicalRecordId  String?         @unique
  medicalRecord    MedicalRecord?  @relation(fields: [medicalRecordId], references: [id])
  attendance       Attendance[] // attendence records for this student
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  TestResults      TestResult[] // test results for this student

  @@index([firstName, lastName, gender])
  @@map("students")
}

model Employee {
  id               String           @id @default(cuid())
  firstName        String
  middleName       String?
  lastName         String
  phone            String
  email            String?
  address          String
  role             Role             @default(STAFF)
  birthDate        DateTime?
  gender           String?
  ssn              String?
  department       String?
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @default(now()) @map("updated_at")
  employeeSalaries EmployeeSalary[]
  ClassPeriods     ClassPeriod[] // teacher can teach multiple classes
  gradedTests      TestResult[] // teacher can grade multiple tests
  medicalRecordId  String?          @unique
  medicalRecord    MedicalRecord?   @relation(fields: [medicalRecordId], references: [id])
  attendance       Attendance[]

  @@index([firstName])
  @@index([lastName])
  @@index([gender])
  @@index([department])
  @@map("employees")
}

model EmployeeSalary {
  id         String    @id @default(cuid())
  salaryType String
  amount     Float
  currency   String
  // salary start and end dates
  startDate  DateTime
  endDate    DateTime?
  notes      String?
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")

  @@index([employeeId])
  @@map("employee_salaries")
}

// Exam, Quiz, Homework, etc.
model Test {
  id            String       @id @default(cuid())
  name          String
  description   String?
  testType      String // Homework, Quiz, Exam, etc.
  question      String? // URL to the test questions
  classPeriodId String? // foreign key to ClassPeriod this test belongs to
  Subject       Subject?     @relation(fields: [subjectId], references: [id])
  subjectId     String? // foreign key to Subject this test belongs to
  testDate      DateTime
  testResults   TestResult[]

  @@index([name, testType, classPeriodId, subjectId])
  @@map("tests")
}

model TestResult {
  id         String    @id @default(cuid())
  testId     String
  studentId  String
  employeeId String? // employee->teacher grades the test
  scores     Int
  takenAt    DateTime
  gradedAt   DateTime
  test       Test      @relation(fields: [testId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
  grader     Employee? @relation(fields: [employeeId], references: [id])

  @@index([testId, studentId, employeeId])
  @@map("test_results")
}

// Math, English, Chemistry, etc.
model Subject {
  id           String        @id @default(cuid())
  subjectName  String
  textbookName String?
  textbookUrl  String?
  description  String?
  department   String?
  classPeriods ClassPeriod[] // classes that teach this subject
  tests        Test[] // all tests for this subject

  @@index([subjectName, department])
  @@map("subjects")
}

model MedicalRecord {
  id         String    @id @default(cuid())
  bloodType  String?
  doctorName String?
  notes      String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  employee   Employee?
  student    Student?

  @@index([doctorName])
  @@map("medical_records")
}

model Guardian {
  id           String    @id @default(cuid())
  firstName    String
  middleName   String?
  lastName     String
  phone        String
  address      String
  email        String?
  profession   String?
  annualIncome String?
  guardianType String?
  role         Role      @default(USER)
  students     Student[]
  isPrimary    Boolean?  @default(false) @map("is_primary")
  canPickup    Boolean?  @default(false) @map("can_pickup")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")

  @@index([phone, email, guardianType, isPrimary])
  @@map("guardians")
}

model Attendance {
  id         String    @id @default(cuid())
  date       DateTime
  status     String
  student    Student?  @relation(fields: [studentId], references: [id])
  studentId  String?
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")

  @@index([date, studentId, employeeId])
  @@map("attendances")
}
